** ex1
a) Par l'absurde: scani[i] = -1 
donc il n'y a pas eu de update(i) auparavant par la thread i OR il y en a bien eu un et l'opération est atomique et aucune autre thread ne peut venir modifier la valeur à la case i.

Donc a est VRAIE

b) Deux cas: 
si le scan de la thread j s'est exécutée avant le update de la thread i alors le scanj[i] donnera -1. 
Sinon il donnera i
VRAIE

c) Voici un ordre d'exécution Contre exemple:
 ti.update(i);
 ti.scan();
 tj.update(j)
 tj.scan()
 FAUX

 d)
Contre exemple:
 ti.update(i)
 tj.update(j)
 ti.scan()
 tj.scan()
 FAUX

 e) 

i différent de j et les opérations sont atomiques donc:
A v B
Pour que ce soit faux => A faux ET B faux

A faux => scanj[i]= -1 donc le j a fait scan donc il a fait update
donc B est forcément vraie
ET VICE VERSA:
B faux => A vrai

LE TOUT EST VRAI

f) scanj < scani <=> scanj[i]!=-1 => scanj[i]=scani[i]
 scanj[i]!=-1 => scanj[i]=i donc scanj[i]=scani[i]

** Exercice 2:Implémentation non-blocking .

*** question1
**** question1-a:
     
        Les executions de ce programmes ne donnent pas le même affichage .
             execution1 : 
                 scan de 0: 0 3 3 3 2 2 1 1 1 0 0 0 0 0 0 
             execution2 :
                 scan de 0: 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 
             execution3 : 
                 scan de 0: 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 
**** question1-b:
      
           -l'operation update n'est pas atomique
            a_table n'est pas proteger par le modificateur volatil, donc écriture "a_table[me]=v;" n'est pas atomique
            
           -le Scan n'est pas atomique ,
pendant la execution de collect(), 1 update peut venir changer les données

comme on peut le voir dans l'execution 1, 2 et 3 de question 1-a ci-dessus

           
*** question2
**** (a)
***** Dans quelle cas une exécution ne termine pas?
un thread A qui fait scan()

Si il existe toujours un processus qui update() la mémoire lors de la double lecture de A. Ainsi, le thread A ne peut jamais se terminer.
***** Quelle condition de progression assure cette implémentation?
****** l'algorithme n'est pas wait-free
car la progression de scan() depend que les autres threads ne change pas la mémoire pendant sa double lecture
****** l'algorithme est non bloquant
car
- soit il retourne le resultat
- soit il est en boucle continue en attendant le bon moment pour sortir de la boucle

 il y a pas utilisation de mutex, il ne se bloque pas sur une instruction
****** l'algorithme est obstruction-free
car 
- soit il retourne le resultat
- soit il est en boucle continue en attendant le bon moment pour sortir de la boucle
**** (b) 
***** L'implementation avec AtomicStampedReference<T> est atomique
car scan() retourne une lecture seulement si 2 lectures successifs est identique
or si 2 lectures successifs est identique, alors ces lecture n'est pas entrelacé avec 1 update(),
donc pas de concurrence, donc c'est atomique
***** si AtomicStampedReference<T> était remplacer par une classe Stamped<T>
alors, cette implémentation est pas atomique.
car on a perdu l'atomicité à l'accès de objet T encapsulé dans le stamped
** ex3
*** 1)
**** Est-ce que le scan et le update terminent toujours?
***** scan termine toujours
scan va d'abord faire 2 collects, ces operations terminent
après les 2 collects, scan decide de retourner collect ou un snapshot. Cet operation termine aussi
donc scan() termine
***** update terminent toujours
update est une sequence de instruction contenant scan() et autre instructions
scan() et autre instructions termine toujours
donc la concatenation de ces instructions termine toujours aussi
donc update terminent toujours



*** 2)
soit n la taille du tableau
on fait au plus n-1  collect pour réaliser un scan
donc scan terminent toujours

comme scan terminent toujours
donc update aussi en suivant le meme raisonnemt de ex3.1

l’implémention obtenue est atomique
